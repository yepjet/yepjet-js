{"version":3,"sources":["ApiResource.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASb,IAAM,YAAY,GAAG,IAAI,OAAO,EAAE,CAAC;;IAE7B,WAAW;AACf,WADI,WAAW,CACH,IAAI,EAAE,IAAI,EAAE;0BADpB,WAAW;;AAEb,gBAAY,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AACvC,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;GAClB;;eAJG,WAAW;;8BAeI;UAAX,IAAI,yDAAG,EAAE;;AACf,UAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC;AACnC,UAAI,CAAC,IAAI,GAAK,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAC9B,UAAI,cAAc,GAAG,eAAK,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACrD,UAAI,GAAG,YAAA,CAAC;;AAER,UAAI;AACF,WAAG,GAAG,uBAAI,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;OAChD,CAAC,OAAM,CAAC,EAAE;AACT,cAAM,YA5BJ,gBAAgB,CA4BS,CAAC,CAAC,OAAO,CAAC,CAAC;OACvC;;AAED,UAAI,cAAc,GAAG;AACnB,cAAM,EAAE,IAAI,CAAC,MAAM;AACnB,eAAO,EAAE,IAAI,CAAC,OAAO;AACrB,WAAG,EAAE,GAAG;OACT,CAAC;;AAEF,UAAI,QAAQ,GAAG,YAAE,KAAK,EAAE,CAAC;;AAEzB,cAAO,IAAI,CAAC,MAAM;AAChB,aAAK,MAAM,CAAC;AACZ,aAAK,KAAK;AACR,wBAAc,CAAC,IAAI,GAAG,IAAI,CAAC;AAC3B,wBAAc,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAChC,gBAAM;AAAA,AACR,aAAK,KAAK;AACR,cAAI,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;AAC7C,gBAAM;AAAA,OACT;;AAED,6BAAQ,cAAc,EAAE,UAAS,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE;AACpD,YAAI,GAAG,EAAE;AACP,kBAAQ,CAAC,MAAM,CAAC,YApDE,YAAY,CAoDG,GAAG,CAAC,CAAC,CAAC;SACxC,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;AAC/C,kBAAQ,CAAC,MAAM,CAAC,YAtDgB,SAAS,CAsDX,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;SAC3D,MAAM;AACL,cAAI;AACF,gBAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;WACzB,CAAC,OAAM,CAAC,EAAE,EAAE;AACb,kBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACxB;OACF,CAAC,CAAC;;AAEH,aAAO,QAAQ,CAAC,OAAO,CAAC;KACzB;;;wBAtDa;AACZ,UAAM,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;AACzC,aAAO,cAAI,MAAM,CAAC;AAChB,gBAAQ,EAAE,OAAO;AACjB,YAAI,EAAE,IAAI,CAAC,IAAI;AACf,gBAAQ,EAAE,IAAI,CAAC,OAAO;OACvB,CAAC,CAAC;KACJ;;;SAbG,WAAW;;;kBA+DF,WAAW","file":"resources/ApiResource.js","sourcesContent":["'use strict';\n\nimport path     from 'path';\nimport url      from 'url';\nimport ptr      from 'path-to-regexp';\nimport Q        from 'q';\nimport request  from 'request';\nimport {WrongParamsError, NetworkError, HTTPError} from './errors';\n\nconst privateProps = new WeakMap();\n\nclass ApiResource {\n  constructor(conf, name) {\n    privateProps.set(this, { conf: conf });\n    this.name = name;\n  }\n\n  get baseUrl() {\n    const conf = privateProps.get(this).conf;\n    return url.format({\n      protocol: 'https',\n      host: conf.host,\n      pathname: conf.version\n    });\n  }\n\n  request(args = {}) {\n    args.method = args.method || 'GET';\n    args.path   = args.path || '';\n    let uncompiledPath = path.join(this.name, args.path);\n    let uri;\n\n    try {\n      uri = ptr.compile(uncompiledPath)(args.params);\n    } catch(e) {\n      throw new WrongParamsError(e.message);\n    }\n\n    let requestOptions = {\n      method: args.method,\n      baseUrl: this.baseUrl, \n      uri: uri\n    };\n\n    let deferred = Q.defer();\n\n    switch(args.method) {\n      case 'POST':\n      case 'PUT':\n        requestOptions.json = true;\n        requestOptions.body = args.data;\n        break;\n      case 'GET':\n        if (args.data) requestOptions.qs = args.data;\n        break;\n    }\n\n    request(requestOptions, function(err, response, body) {\n      if (err) {\n        deferred.reject(new NetworkError(err));\n      } else if (!/^2\\d\\d$/.test(response.statusCode)) {\n        deferred.reject(new HTTPError(response.statusCode, body));\n      } else {\n        try {\n          body = JSON.parse(body);\n        } catch(e) {}\n        deferred.resolve(body);\n      }\n    });\n\n    return deferred.promise;\n  }\n}\n\nexport default ApiResource;\n"],"sourceRoot":"/source/"}